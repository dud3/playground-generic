/**
 * @since 0.3.2
 */
import { Contravariant1 } from 'fp-ts/es6/Contravariant'
import { Predicate } from 'fp-ts/es6/function'
import { Task } from 'fp-ts/es6/Task'
import { Monoid } from 'fp-ts/es6/Monoid'
declare module 'fp-ts/es6/HKT' {
  interface URItoKind<A> {
    LoggerTask: LoggerTask<A>
  }
}
/**
 * @since 0.3.2
 */
export declare const URI = 'LoggerTask'
/**
 * @since 0.3.2
 */
export declare type URI = typeof URI
/**
 * @since 0.3.2
 */
export interface LoggerTask<A> {
  (a: A): Task<void>
}
/**
 * @since 0.3.2
 */
export declare const filter: <A>(logger: LoggerTask<A>, predicate: Predicate<A>) => LoggerTask<A>
/**
 * @since 0.3.2
 */
export declare const getMonoid: <A = never>() => Monoid<LoggerTask<A>>
/**
 * @since 0.3.2
 */
export declare const loggerTask: Contravariant1<URI>
declare const contramap: <A, B>(f: (b: B) => A) => (fa: LoggerTask<A>) => LoggerTask<B>
export {
  /**
   * @since 0.3.2
   */
  contramap
}
