"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.main = void 0;
/**
 * @since 0.6.0
 */
var E = require("fp-ts/Either");
var M = require("fp-ts/Monoid");
var O = require("fp-ts/Option");
var RA = require("fp-ts/ReadonlyArray");
var RTE = require("fp-ts/ReaderTaskEither");
var TE = require("fp-ts/TaskEither");
var function_1 = require("fp-ts/function");
var TD = require("io-ts/TaskDecoder");
var path = require("path");
var Config = require("./Config");
var FileSystem_1 = require("./FileSystem");
var Markdown_1 = require("./Markdown");
var P = require("./Parser");
var CONFIG_FILE_NAME = 'docs-ts.json';
var PackageJSONDecoder = function_1.pipe(TD.type({ name: TD.string }), TD.intersect(TD.partial({ homepage: TD.string })));
// -------------------------------------------------------------------------------------
// files
// -------------------------------------------------------------------------------------
var readFile = function (path) {
    return function_1.pipe(RTE.ask(), RTE.chainTaskEitherK(function (_a) {
        var fileSystem = _a.fileSystem;
        return fileSystem.readFile(path);
    }), RTE.map(function (content) { return FileSystem_1.File(path, content, false); }));
};
var readFiles = RA.traverse(RTE.ApplicativePar)(readFile);
var writeFile = function (file) {
    var overwrite = function_1.pipe(RTE.ask(), RTE.chainTaskEitherK(function (_a) {
        var fileSystem = _a.fileSystem, logger = _a.logger;
        return function_1.pipe(logger.debug("Overwriting file " + file.path), TE.chain(function () { return fileSystem.writeFile(file.path, file.content); }));
    }));
    var skip = function_1.pipe(RTE.ask(), RTE.chainTaskEitherK(function (_a) {
        var logger = _a.logger;
        return logger.debug("File " + file.path + " already exists, skipping creation");
    }));
    var write = function_1.pipe(RTE.ask(), RTE.chainTaskEitherK(function (_a) {
        var fileSystem = _a.fileSystem;
        return fileSystem.writeFile(file.path, file.content);
    }));
    return function_1.pipe(RTE.ask(), RTE.chain(function (_a) {
        var fileSystem = _a.fileSystem;
        return RTE.fromTaskEither(fileSystem.exists(file.path));
    }), RTE.chain(function (exists) { return (exists ? (file.overwrite ? overwrite : skip) : write); }));
};
var writeFiles = function_1.flow(RA.traverse(RTE.ApplicativePar)(writeFile), RTE.map(function_1.constVoid));
var readPackageJSON = function_1.pipe(RTE.ask(), RTE.chainTaskEitherK(function (_a) {
    var fileSystem = _a.fileSystem, logger = _a.logger;
    return function_1.pipe(fileSystem.readFile(path.join(process.cwd(), 'package.json')), TE.mapLeft(function () { return "Unable to read package.json in \"" + process.cwd() + "\""; }), TE.chainEitherK(function (json) {
        return E.parseJSON(json, function_1.flow(E.toError, function (err) { return String(err.message); }));
    }), TE.chain(function (json) {
        return function_1.pipe(PackageJSONDecoder.decode(json), TE.mapLeft(function (decodeError) { return "Unable to decode package.json:\n" + TD.draw(decodeError); }));
    }), TE.chain(function (_a) {
        var name = _a.name, homepage = _a.homepage;
        return function_1.pipe(logger.debug("Project name detected: " + name), TE.chain(function () {
            return function_1.pipe(O.fromNullable(homepage), TE.fromOption(function () { return "Missing homepage in package.json"; }), TE.map(function (homepage) { return ({ name: name, homepage: homepage }); }));
        }));
    }));
}));
var readSourcePaths = function_1.pipe(RTE.ask(), RTE.chainTaskEitherK(function (_a) {
    var fileSystem = _a.fileSystem, logger = _a.logger, settings = _a.settings;
    return function_1.pipe(fileSystem.search(path.join(settings.srcDir, '**', '*.ts'), settings.exclude), TE.map(RA.map(path.normalize)), TE.chainFirst(function (paths) { return function_1.pipe(logger.info("Found " + paths.length + " modules")); }));
}));
var readSourceFiles = function_1.pipe(RTE.ask(), RTE.chain(function (C) {
    return function_1.pipe(readSourcePaths, RTE.chainTaskEitherK(function (paths) { return function_1.pipe(C, readFiles(paths)); }));
}));
// -------------------------------------------------------------------------------------
// parsers
// -------------------------------------------------------------------------------------
var parseFiles = function (files) {
    return function_1.pipe(RTE.ask(), RTE.chainFirst(function (_a) {
        var logger = _a.logger;
        return RTE.fromTaskEither(logger.debug('Parsing files...'));
    }), RTE.chain(function () { return P.parseFiles(files); }));
};
// -------------------------------------------------------------------------------------
// examples
// -------------------------------------------------------------------------------------
var foldFiles = M.fold(RA.getMonoid());
var getExampleFiles = function (modules) {
    return function_1.pipe(RTE.ask(), RTE.map(function (env) {
        return function_1.pipe(modules, RA.chain(function (module) {
            var prefix = module.path.join('-');
            var getDocumentableExamples = function (id) { return function (documentable) {
                return function_1.pipe(documentable.examples, RA.mapWithIndex(function (i, content) {
                    return FileSystem_1.File(path.join(env.settings.outDir, 'examples', prefix + "-" + id + "-" + documentable.name + "-" + i + ".ts"), content + "\n", true);
                }));
            }; };
            var moduleExamples = getDocumentableExamples('module')(module);
            var methods = function_1.pipe(module.classes, RA.chain(function (c) {
                return foldFiles([
                    function_1.pipe(c.methods, RA.chain(getDocumentableExamples(c.name + "-method"))),
                    function_1.pipe(c.staticMethods, RA.chain(getDocumentableExamples(c.name + "-staticmethod")))
                ]);
            }));
            var interfaces = function_1.pipe(module.interfaces, RA.chain(getDocumentableExamples('interface')));
            var typeAliases = function_1.pipe(module.typeAliases, RA.chain(getDocumentableExamples('typealias')));
            var constants = function_1.pipe(module.constants, RA.chain(getDocumentableExamples('constant')));
            var functions = function_1.pipe(module.functions, RA.chain(getDocumentableExamples('function')));
            return foldFiles([moduleExamples, methods, interfaces, typeAliases, constants, functions]);
        }));
    }));
};
var addAssertImport = function (code) {
    return code.indexOf('assert.') !== -1 ? "import * as assert from 'assert'\n" + code : code;
};
var replaceProjectName = function (source) {
    return function_1.pipe(RTE.ask(), RTE.map(function (_a) {
        var settings = _a.settings;
        var importRegex = function (projectName) {
            return new RegExp("from (?<quote>['\"])" + projectName + "(?:/lib)?(?:/(?<path>.*))?\\k<quote>", 'g');
        };
        return source.replace(importRegex(settings.projectName), function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var groups = args[args.length - 1];
            return "from '../../src" + (Boolean(groups.path) ? "/" + groups.path : '') + "'";
        });
    }));
};
var handleImports = RA.traverse(RTE.ApplicativePar)(function (file) {
    return function_1.pipe(replaceProjectName(file.content), RTE.map(addAssertImport), RTE.map(function (content) { return FileSystem_1.File(file.path, content, file.overwrite); }));
});
var getExampleIndex = function (examples) {
    var content = function_1.pipe(examples, RA.foldMap(M.monoidString)(function (example) { return "import './" + path.basename(example.path) + "'\n"; }));
    return function_1.pipe(RTE.ask(), RTE.map(function (env) { return FileSystem_1.File(path.join(env.settings.outDir, 'examples', 'index.ts'), content + "\n", true); }));
};
var cleanExamples = function_1.pipe(RTE.ask(), RTE.chainTaskEitherK(function (_a) {
    var fileSystem = _a.fileSystem, settings = _a.settings;
    return fileSystem.remove(path.join(settings.outDir, 'examples'));
}));
var spawnTsNode = function_1.pipe(RTE.ask(), RTE.chainFirst(function (_a) {
    var logger = _a.logger;
    return RTE.fromTaskEither(logger.debug('Type checking examples...'));
}), RTE.chainTaskEitherK(function (_a) {
    var example = _a.example, settings = _a.settings;
    var command = process.platform === 'win32' ? 'ts-node.cmd' : 'ts-node';
    var executablePath = path.join(process.cwd(), settings.outDir, 'examples', 'index.ts');
    return example.run(command, executablePath);
}));
var writeExamples = function (examples) {
    return function_1.pipe(RTE.ask(), RTE.chainFirst(function (_a) {
        var logger = _a.logger;
        return RTE.fromTaskEither(logger.debug('Writing examples...'));
    }), RTE.chain(function (C) {
        return function_1.pipe(getExampleIndex(examples), RTE.map(function (index) { return RA.cons(index, examples); }), RTE.chainTaskEitherK(function (files) { return function_1.pipe(C, writeFiles(files)); }));
    }));
};
var typeCheckExamples = function (modules) {
    return function_1.pipe(getExampleFiles(modules), RTE.chain(handleImports), RTE.chain(function (examples) {
        return examples.length === 0
            ? cleanExamples
            : function_1.pipe(writeExamples(examples), RTE.chain(function () { return spawnTsNode; }), RTE.chain(function () { return cleanExamples; }));
    }));
};
// -------------------------------------------------------------------------------------
// markdown
// -------------------------------------------------------------------------------------
var getHome = function_1.pipe(RTE.ask(), RTE.map(function (_a) {
    var settings = _a.settings;
    return FileSystem_1.File(path.join(process.cwd(), settings.outDir, 'index.md'), "---\ntitle: Home\nnav_order: 1\n---\n", false);
}));
var getModulesIndex = function_1.pipe(RTE.ask(), RTE.map(function (_a) {
    var settings = _a.settings;
    return FileSystem_1.File(path.join(process.cwd(), settings.outDir, 'modules', 'index.md'), "---\ntitle: Modules\nhas_children: true\npermalink: /docs/modules\nnav_order: 2\n---", false);
}));
var replace = function (searchValue, replaceValue) { return function (s) {
    return s.replace(searchValue, replaceValue);
}; };
/* tslint:disable:no-regex-spaces */
var resolveConfigYML = function (previousContent, settings) {
    return function_1.pipe(previousContent, replace(/^remote_theme:.*$/m, "remote_theme: " + settings.theme), replace(/^search_enabled:.*$/m, "search_enabled: " + settings.enableSearch), replace(/^  '\S* on GitHub':\n    - '.*'/m, "  '" + settings.projectName + " on GitHub':\n    - '" + settings.projectHomepage + "'"));
};
/* tslint:enable:no-regex-spaces */
var getHomepageNavigationHeader = function (settings) {
    var isGitHub = settings.projectHomepage.toLowerCase().includes('github');
    return isGitHub ? settings.projectName + ' on GitHub' : 'Homepage';
};
var getConfigYML = function_1.pipe(RTE.ask(), RTE.chainTaskEitherK(function (_a) {
    var fileSystem = _a.fileSystem, settings = _a.settings;
    var filePath = path.join(process.cwd(), settings.outDir, '_config.yml');
    return function_1.pipe(fileSystem.exists(filePath), TE.chain(function (exists) {
        return exists
            ? function_1.pipe(fileSystem.readFile(filePath), TE.map(function (content) { return FileSystem_1.File(filePath, resolveConfigYML(content, settings), true); }))
            : TE.of(FileSystem_1.File(filePath, "remote_theme: " + settings.theme + "\n\n# Enable or disable the site search\nsearch_enabled: " + settings.enableSearch + "\n\n# Aux links for the upper right navigation\naux_links:\n  '" + getHomepageNavigationHeader(settings) + "':\n    - '" + settings.projectHomepage + "'", false));
    }));
}));
var getMarkdownOutputPath = function (module) {
    return function_1.pipe(RTE.ask(), RTE.map(function (_a) {
        var settings = _a.settings;
        return path.join(settings.outDir, 'modules', module.path.slice(1).join(path.sep) + ".md");
    }));
};
var getModuleMarkdownFiles = function (modules) {
    return function_1.pipe(modules, RTE.traverseArrayWithIndex(function (order, module) {
        return function_1.pipe(getMarkdownOutputPath(module), RTE.bindTo('outputPath'), RTE.bind('content', function () { return RTE.right(Markdown_1.printModule(module, order + 1)); }), RTE.map(function (_a) {
            var content = _a.content, outputPath = _a.outputPath;
            return FileSystem_1.File(outputPath, content, true);
        }));
    }));
};
var getMarkdownFiles = function (modules) {
    return function_1.pipe(RTE.sequenceArray([getHome, getModulesIndex, getConfigYML]), RTE.chain(function (meta) {
        return function_1.pipe(getModuleMarkdownFiles(modules), RTE.map(function (files) { return RA.getMonoid().concat(meta, files); }));
    }));
};
var writeMarkdownFiles = function (files) {
    return function_1.pipe(RTE.ask(), RTE.chainFirst(function (_a) {
        var fileSystem = _a.fileSystem, logger = _a.logger, settings = _a.settings;
        var outPattern = path.join(settings.outDir, '**/*.ts.md');
        return function_1.pipe(logger.debug("Cleaning up docs folder: deleting " + outPattern), TE.chain(function () { return fileSystem.remove(outPattern); }), RTE.fromTaskEither);
    }), RTE.chainTaskEitherK(function (C) {
        return function_1.pipe(C.logger.debug('Writing markdown files...'), TE.chain(function () { return function_1.pipe(C, writeFiles(files)); }));
    }));
};
// -------------------------------------------------------------------------------------
// config
// -------------------------------------------------------------------------------------
var getDefaultSettings = function (projectName, projectHomepage) {
    return function_1.pipe(Config.build(projectName, projectHomepage), Config.resolveSettings);
};
var hasConfiguration = function_1.pipe(RTE.ask(), RTE.chainTaskEitherK(function (_a) {
    var fileSystem = _a.fileSystem, logger = _a.logger;
    return function_1.pipe(logger.debug('Checking for configuration file...'), TE.chain(function () { return fileSystem.exists(path.join(process.cwd(), CONFIG_FILE_NAME)); }));
}));
var readConfiguration = function_1.pipe(RTE.ask(), RTE.chain(function () { return readFile(path.join(process.cwd(), CONFIG_FILE_NAME)); }));
var parseConfiguration = function (defaultSettings) { return function (file) {
    return function_1.pipe(RTE.ask(), RTE.chainTaskEitherK(function (_a) {
        var logger = _a.logger;
        return function_1.pipe(E.parseJSON(file.content, toErrorMsg), TE.fromEither, TE.chainFirst(function () { return logger.info("Found configuration file"); }), TE.chainFirst(function () { return logger.debug("Parsing configuration file found at: " + file.path); }), TE.chain(Config.decode), TE.bimap(function (decodeError) { return "Invalid configuration file detected:\n" + decodeError; }, function (settings) { return (__assign(__assign({}, defaultSettings), settings)); }));
    }));
}; };
var useDefaultSettings = function (defaultSettings) {
    return function_1.pipe(RTE.ask(), RTE.chainTaskEitherK(function (_a) {
        var logger = _a.logger;
        return function_1.pipe(logger.info('No configuration file detected, using default settings'), TE.map(function () { return defaultSettings; }));
    }));
};
var getDocsConfiguration = function (projectName, projectHomepage) {
    return function_1.pipe(hasConfiguration, RTE.bindTo('hasConfig'), RTE.bind('defaultSettings', function () { return RTE.right(getDefaultSettings(projectName, projectHomepage)); }), RTE.chain(function (_a) {
        var defaultSettings = _a.defaultSettings, hasConfig = _a.hasConfig;
        return hasConfig
            ? function_1.pipe(readConfiguration, RTE.chain(parseConfiguration(defaultSettings)))
            : useDefaultSettings(defaultSettings);
    }));
};
// -------------------------------------------------------------------------------------
// program
// -------------------------------------------------------------------------------------
/**
 * @category program
 * @since 0.6.0
 */
exports.main = function_1.pipe(RTE.ask(), RTE.chain(function (capabilities) {
    return function_1.pipe(readPackageJSON, RTE.chain(function (pkg) {
        return function_1.pipe(getDocsConfiguration(pkg.name, pkg.homepage), RTE.chainTaskEitherK(function (settings) {
            var program = function_1.pipe(readSourceFiles, RTE.chain(parseFiles), RTE.chainFirst(typeCheckExamples), RTE.chain(getMarkdownFiles), RTE.chain(writeMarkdownFiles));
            return program(__assign(__assign({}, capabilities), { settings: settings }));
        }));
    }));
}));
// -------------------------------------------------------------------------------------
// utils
// -------------------------------------------------------------------------------------
var toErrorMsg = function_1.flow(E.toError, function (err) { return String(err.message); });
